package com.bc.application.service.actions;

import com.bc.utilities.TripleDES;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;

/**
 * This class defines methods required for generating an IBM 3624 PIN based on an offset.
 */
@Getter
@Slf4j
public class GenerateIBM3624Pin {

    private final String pan;
    private final String pin;
    private final String pinLength;
    private final String intermediatePin;
    private final String pinOffset;

    /**
     * Private constructor to be used by the builder pattern method to instantiate the object.
     * @param builder Builder pattern object with values set.
     */
    private GenerateIBM3624Pin(Builder builder) {

        this.pan = builder.pan;
        this.pin = builder.pin;
        this.pinLength = builder.pinLength;
        this.intermediatePin = builder.intermediatePin;
        this.pinOffset = builder.pinOffset;
    }

    /**
     * Override default toString method to generate a string representation of class attributes for logging.
     * @return String representation of class attributes.
     */
    @Override
    public String toString(){
        return this.getClass().getSimpleName() +
                " { " +
                "pan: " + pan + ", " +
                "pin: " + pin + ", " +
                "pinLength: " + pinLength + ", " +
                "intermediatePin: " + intermediatePin + ", " +
                "pinOffset: " + pinOffset +
                " }";
    }

    /**
     * Public builder method for initiating sequential builder methods for IBM 3624 PIN generation.
     * @return new Builder class instance.
     */
    public static GetPinValidationData builder(){
        return new Builder();
    }

    /**
     * Interface defining method for extracting Pin validation data from PAN.
     */
    public interface GetPinValidationData {
        /**
         * Generate PIN validation data from PAN, i.e., rightmost 12 digits from PAN excluding check digit.
         * @param pan PAN for which PIN must be generated.
         * @return 12 digit PIN validation data.
         */
        TdeaEncryptPinValidationData getPinValidationDataFromPan (String pan);
    }

    /**
     * Interface defining method for TDEA encrypting the PIN validation data.
     */
    public interface TdeaEncryptPinValidationData {
        /**
         * Encrypt the PIN validation data using PIN Verification Key (PVK).
         * @param pinVerificationKey PIN Verification Key.
         * @return PVK encrypted PIN validation data.
         */
        DecimaliseEncryptedValidationData encryptPinValidationData (String pinVerificationKey);
    }

    /**
     * Interface defining methods for decimalisation of the encrypted PIN Validation Data and generating intermediate PIN.
     */
    public interface DecimaliseEncryptedValidationData {
        /**
         * Decimalise TDEA encrypted PIN Validation Data using an input decimalisation table.
         * @param decimalisationTable Decimalisation table to be used for decimalisation and data scrambling.
         * @return Intermediate PIN generated by transforming encrypted PIN validation data using decimalisation table.
         */
        TruncateToPinLength decimaliseEncryptedValidationData (String decimalisationTable);
    }

    /**
     * Interface defining methods for truncating the intermediate PIN to assigned PIN length.
     */
    public interface TruncateToPinLength {
        /**
         * Truncate intermediate PIN to assigned PIN length and generate natural PIN.
         * @param pinLength Assinged PIN length for the natural PIN.
         * @return Natural PIN generated.
         */
        AddPinOffset truncateToPinLength (String pinLength);
    }

    /**
     * Interface defining methods for performing PINOffset addition to natural PIN.
     */
    public interface AddPinOffset {
        /**
         * Module 10 add PIN Offset to the natural PIN, to generate PIN.
         * @param pinOffset Offset to be added to natural PIN.
         * @return Generated PIN.
         */
        GenerateResponse addPinOffset (String pinOffset);
    }

    /**
     *  Interface defining the final method in the builder sequence.
     */
    public interface GenerateResponse {
        /**
         * Method for building the response data.
         * @return Generated PIN.
         */
        GenerateIBM3624Pin build();
    }

    /**
     * Private class implementing the builder interfaces and defining the concrete methods to be used for IBM3624 PIN generation.
     */
    private static class Builder implements GetPinValidationData, TdeaEncryptPinValidationData, DecimaliseEncryptedValidationData, AddPinOffset, TruncateToPinLength, GenerateResponse {

        private String pan;
        private String pin;
        private String pinLength;
        private String pinOffset;
        private String pinValidationData;
        private String encryptedPinValidationData;
        private String intermediatePin;

        /**
         * Generate PIN validation data from PAN, i.e., rightmost 12 digits from PAN excluding check digit.
         *
         * @param pan PAN for which PIN must be generated.
         * @return 12 digit PIN validation data.
         */
        @Override
        public TdeaEncryptPinValidationData getPinValidationDataFromPan(String pan) {

            final int PIN_VALIDATION_DATA_LENGTH = 16;
            final String PAD_CHARACTER = "0";
            // Pad PAN with "0" to the right, if less than 16
            log.debug(this.getClass().getSimpleName() + " Pan received: {}.", pan);
            if (pan.length() < PIN_VALIDATION_DATA_LENGTH) {
                this.pinValidationData = pan + PAD_CHARACTER.repeat(PIN_VALIDATION_DATA_LENGTH - pan.length());
            } else {
                this.pinValidationData = pan;
            }
            this.pan = pan;
            return this;
        }

        /**
         * Encrypt the PIN validation data using PIN Verification Key (PVK).
         *
         * @param pinVerificationKey PIN Verification Key.
         * @return PVK encrypted PIN validation data.
         */
        @Override
        public DecimaliseEncryptedValidationData encryptPinValidationData(String pinVerificationKey) {
            log.debug(this.getClass().getSimpleName() + " PinVerificationKey received: {}.", pinVerificationKey);
            encryptedPinValidationData = TripleDES.encrypt(pinValidationData, pinVerificationKey);
            return this;
        }

        /**
         * Decimalise TDEA encrypted PIN Validation Data using an input decimalisation table.
         *
         * @param decimalisationTable     Decimalisation table to be used for decimalisation and data scrambling.
         * @return Intermediate PIN generated by transforming encrypted PIN validation data using decimalisation table.
         */
        @Override
        public TruncateToPinLength decimaliseEncryptedValidationData(String decimalisationTable) {
            log.debug(this.getClass().getSimpleName() + " Decimalistion table received: {}.", decimalisationTable);
            char [] encryptedValidationDataArray = encryptedPinValidationData.toCharArray();
            char [] decimalisationTableArray = decimalisationTable.toCharArray();
            StringBuilder decimalisedPinValidationData = new StringBuilder();
            for (char c : encryptedValidationDataArray) {
                decimalisedPinValidationData.append(decimalisationTableArray[Integer.parseInt(String.valueOf(c), 16)]);
            }
            intermediatePin = decimalisedPinValidationData.toString();
            return this;
        }

        /**
         * Truncate intermediate PIN to assigned PIN length and generate natural PIN.
         *
         * @param pinLength       Assigned PIN length for the natural PIN.
         * @return Natural PIN generated.
         */
        @Override
        public AddPinOffset truncateToPinLength (String pinLength) {
            log.debug(this.getClass().getSimpleName() + " PinLength received: {}.", pinLength);
            this.pinLength = pinLength;
            intermediatePin = intermediatePin.substring(0, Integer.parseInt(pinLength));
            return this;
        }

        /**
         * Module 10 add PIN Offset to the natural PIN, to generate PIN.
         *
         * @param pinOffset  Offset to be added to natural PIN.
         * @return Generated PIN.
         */
        @Override
        public GenerateResponse addPinOffset(String pinOffset) {
            log.debug(this.getClass().getSimpleName() + " PinOffset received: {}.", pinOffset);
            StringBuilder offsetAdjustedPin = new StringBuilder();
            String adjustedPinOffset = pinOffset.substring(pinOffset.length() - Integer.parseInt(pinLength));
            for(int i = 0; i < adjustedPinOffset.length(); i++){
                int pinDigit = Integer.parseInt(String.valueOf(intermediatePin.charAt(i)));
                int offsetDigit = Integer.parseInt(String.valueOf(adjustedPinOffset.charAt(i)));
                offsetAdjustedPin.append((pinDigit + offsetDigit) % 10);
            }
            this.pinOffset = pinOffset;
            this.pin = offsetAdjustedPin.toString();
            return this;
        }

        /**
         * Method for building the response data.
         * @return Generated PIN.
         */
        @Override
        public GenerateIBM3624Pin build() {
            return new GenerateIBM3624Pin(this);
        }
    }

}
